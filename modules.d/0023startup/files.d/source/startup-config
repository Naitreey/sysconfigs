#!/usr/bin/env python3
import sys
import re
from subprocess import run, PIPE
from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter

def parse_args():
    parser = ArgumentParser(formatter_class=ArgumentDefaultsHelpFormatter)
    parser.add_argument(
        "--enable-trackpad", "-t",
        action="store_true",
        help="enable trackpad.",
    )
    parser.add_argument(
        "--mouse-speed", "-m",
        default="-0.9",
        help="set mouse pointer speed.",
    )
    parser.add_argument(
        "--capslock", "-c",
        help="Re-map CapsLock to other key symbol.",
    )
    return parser.parse_args()

def get_device_id(device_pattern):
    pattern = re.compile(device_pattern, re.IGNORECASE)
    p = run(["xinput", "--list"], check=True, stdout=PIPE, encoding="utf-8")
    for line in p.stdout.splitlines():
        if not pattern.search(line):
            continue
        for field in line.split():
            if not field.startswith("id="):
                continue
            return int(field.partition("id=")[-1])
    else:
        raise DeviceNotFound(f"device of pattern {device_pattern} not found")

def setup_mouse(speed):
    try:
        mouse_id = get_device_id("Mouse")
    except DeviceNotFound:
        print("mouse not found", file=sys.stderr)
        return
    run(["xinput", "--set-prop", str(mouse_id),
         "libinput Accel Speed", speed], check=True)

def setup_trackpad(enable):
    try:
        trackpad_id = get_device_id(r"GlidePoint|TouchPad")
    except DeviceNotFound:
        print("trackpad not found", file=sys.stderr)
        return
    if enable:
        run(["xinput", "--enable", str(trackpad_id)], check=True)
        run(["xinput", "--set-prop", str(trackpad_id),
             "libinput Tapping Enabled", "1"], check=True)
        run(["xinput", "--set-prop", str(trackpad_id),
             "libinput Natural Scrolling Enabled", "1"], check=True)
    else:
        run(["xinput", "--disable", str(trackpad_id)], check=True)

def setup_keyboard(capslock=None):
    if capslock is None:
        # auto detect keyboard type
        lsusb_output = run(
            ["lsusb"],
            stdout=PIPE,
            check=True,
            encoding="utf-8",
        ).stdout
        if "Topre" in lsusb_output:
            capslock = "ctrl"
        else:
            capslock = "capslock"
    if capslock == "ctrl":
        run(["setxkbmap", "-option", "caps:ctrl_modifier"], check=True)
    elif capslock == "capslock":
        # reset settings
        run(["setxkbmap", "-option"], check=True)

def main():
    args = parse_args()
    setup_trackpad(enable=args.enable_trackpad)
    setup_mouse(speed=args.mouse_speed)
    setup_keyboard(capslock=args.capslock)

class DeviceNotFound(Exception):
    pass

if __name__ == "__main__":
    main()
