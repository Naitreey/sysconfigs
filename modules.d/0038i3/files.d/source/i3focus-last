#!/usr/bin/env python3

import os
import sys
import socket
import selectors
import threading
import i3ipc
from argparse import ArgumentParser

SOCKET_FILE = '/tmp/i3_focus_last'
MAX_WIN_HISTORY = 15


class I3Subscription:

    def __init__(self):
        self.i3 = i3ipc.Connection()
        self.add("ipc_shutdown", self.terminate)
        self.socket = socket.socket(
            socket.AF_UNIX,
            socket.SOCK_STREAM,
        )
        if os.path.exists(SOCKET_FILE):
            os.remove(SOCKET_FILE)
        self.socket.bind(SOCKET_FILE)
        self.socket.listen(1)

    def add(self, event, handler):
        self.i3.on(event, handler)

    def extend(self, specs):
        for event, handler in specs:
            self.add(event, handler)

    def launch_i3(self):
        self.i3.main()

    def terminate(self, i3conn, event=None):
        i3conn.main_quit()
        sys.exit(0)

    def start(self):
        self.launch_i3()


class FocusController:

    event = "window::focus"

    def __init__(self, i3sub):
        self.selector = selectors.DefaultSelector()
        self.i3sub = i3sub
        self.window_list = []
        self.window_list_lock = threading.RLock()

    def accept(self, sock):
        conn, addr = sock.accept()
        self.selector.register(conn, selectors.EVENT_READ, self.read)

    def read(self, conn):
        data = conn.recv(1024)
        if data == b'switch':
            with self.window_list_lock:
                tree = self.i3sub.i3.get_tree()
                focused_window = tree.find_focused()
                current_workspace_id = focused_window.workspace().id
                windows = set(w.id for w in tree.leaves())
                for window in self.window_list[1:]:
                    workspace_id, window_id = window
                    if (window_id not in windows
                            or current_workspace_id != workspace_id):
                        self.window_list.remove(window)
                    else:
                        self.i3sub.i3.command('[con_id=%s] focus' % window_id)
                        break
        elif not data:
            self.selector.unregister(conn)
            conn.close()

    def start_thread(self):
        t = threading.Thread(target=self._run)
        t.daemon = True
        t.start()

    def _run(self):
        self.selector.register(
            self.i3sub.socket,
            selectors.EVENT_READ,
            self.accept,
        )
        while True:
            for key, event in self.selector.select():
                callback = key.data
                callback(key.fileobj)

    def handler(self, i3conn, i3event):
        with self.window_list_lock:
            window_id = i3event.container.id
            workspace_id = self.i3sub.i3.get_tree().find_focused().workspace().id
            window = (workspace_id, window_id)
            if window in self.window_list:
                self.window_list.remove(window)
            self.window_list.insert(0, window)
            if len(self.window_list) > MAX_WIN_HISTORY:
                del self.window_list[MAX_WIN_HISTORY:]


class HighlightController:

    event = "window::focus"

    def handler(self, i3conn, i3event):
        i3conn.command('[class="^.*"] border none')
        i3conn.command('border pixel 2')


def start_server():
    i3sub = I3Subscription()
    focus_controller = FocusController(i3sub)
    highlight_controller = HighlightController()
    focus_controller.start_thread()
    i3sub.extend([
        (focus_controller.event, focus_controller.handler),
        #(highlight_controller.event, highlight_controller.handler),
    ])
    i3sub.start()


def switch():
    client_socket = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
    client_socket.connect(SOCKET_FILE)
    client_socket.send(b'switch')
    client_socket.close()

def parse_args():
    parser = ArgumentParser(
        prog='focus-last.py',
        description='''Focus last focused window.

                    This script should be launch from the .xsessionrc
                    without argument. Then you can bind this script with
                    the `--switch` option to one of your i3 keybinding.
                    ''',
    )
    parser.add_argument(
        '--switch',
        dest='switch',
        action='store_true',
        help='Switch to the previous window',
        default=False,
    )
    return parser.parse_args()


def main():
    args = parse_args()
    if args.switch:
        switch()
    else:
        start_server()

if __name__ == '__main__':
    main()
