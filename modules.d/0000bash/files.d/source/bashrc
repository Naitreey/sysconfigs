# .bashrc

# Source global definitions
if [ -f /etc/bashrc ]; then
	. /etc/bashrc
fi

# Uncomment the following line if you don't like systemctl's auto-paging feature:
# export SYSTEMD_PAGER=

#------------User specific aliases and functions-------------
# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'
export LINES COLUMNS
# control less(1) behaviors
# -X leaves file contents on the screen when less exits.
# -F makes less quit if the entire output can be displayed on one screen.
# -R displays ANSI color escape sequences in "raw" form.
# -S disables line wrapping. Side-scroll to see long lines.
# -i enables case-insensitive search.
export LESS='-iXFR'

alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias e='gvim'
alias xo='xdg-open'
alias re='readlink -e'
alias pav='pavucontrol'
# no emacs keys
alias info='info --vi-keys'
# rm interactively, for safety
alias rm='rm -i'
# use git diff for better
alias diff='git diff --no-index'

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth
# history list shows timestamp
HISTTIMEFORMAT='%F %T '
# because each timestamp takes a separate line in $HISTFILE,
# to make history list and history file contain the same lines
# of history, $HISTFILESIZE should double $HISTSIZE
HISTSIZE=8192
HISTFILESIZE=16384

# append to the history file, don't overwrite it.
# this is for safety concerns. If multiple bash were killed
# simultaneously and each overwrite the $HISTFILE, race
# condition may result in $HISTFILE truncated to zero.
shopt -s histappend
# do not clear input when history substitution failed to match.
# because a failed substitution input does not count as a failed command,
# Ctrl-P doesn't work.
shopt -s histreedit
# concatenate multiline command into one line in history, to ease re-editting
shopt -s cmdhist

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize
# check if the remembered command path exists before executing it
shopt -s checkhash
# print background job status (if any) alongside the "There are stopped jobs" line
shopt -s checkjobs
# unset `force_fignore`, we don't want to ignore any files.
# we are managing a filesystem, not some source code repo.
shopt -u force_fignore
# to avoid surprising comparison result caused by unexpected locale collating order,
# we ignore locale's collating sequence definition in range expression
shopt -s globasciiranges
# set LC_COLLATE=C to collate in strict numeric order
export LC_COLLATE=C
# completing hostname on tab completion
shopt -s hostcomplete
# `#` char acts as comment char, as usual (set by default)
shopt -s interactive_comments
# do not tab-complete on an empty line
shopt -s no_empty_cmd_completion
# subshell inherits `-e` option if set
shopt -s inherit_errexit
# exit status of pipeline should reflect the failing commands
set -o pipefail
# default editor, viewer and browser
export EDITOR=vim
export VIEWER=vim
export BROWSER=google-chrome

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# `\e]2;-----\a part is for title bar
# \[-----\] part does not occupy screen space
# \e[---m part is color code
# add git repo status to ps1
source ~/.git-prompt.sh
__jobnums() {
    # exclude autojump background job
    # XXX this is actually weird: according to its code,
    #  autojump background job should have dettached from shell
    # seesion when launched. Thus it shouldn't even show up in jobs
    # list in the first place !!!
    declare jobnums=$(jobs -p | jobs -x grep -v %'( autojump'  | wc -l)
    [[ $jobnums -gt 0 ]] && echo -n "$jobnums:"
}

# put cwd in PS1 if we are in terminal,
# otherwise put cwd atop pseudo-terminal window
if [[ $(tty) == *pts* ]]; then
    # terminal header line: host@$PWD
    # prompt: user:n:(branch)$
    #PS1='\[\e]2;\h@\w\a\e[33;1m\]\u:$(__jobnums)\[\e[30;1m\]$(__git_ps1 "(%s)")\[\e[33;1m\]$ \[\e[0m\]'
    # powerline configs
    # disable PS2 PS3 modification to speed up
    #POWERLINE_BASH_CONTINUATION=0
    #POWERLINE_BASH_SELECT=0
    . /usr/lib/python3.7/site-packages/powerline/bindings/bash/powerline.sh
else
    # keep only the last two components of pathname
    PROMPT_DIRTRIM=2
    # user@host:$PWD:n:(branch)$
    PS1='\[\e[33;1m\]\u@\h:\w:$(__jobnums)\[\e[30;1m\]$(__git_ps1 "(%s)")\[\e[33;1m\]$ \[\e[0m\]'
fi

# more delicate info in debug prompt
PS4='${BASH_SOURCE[0]}@${LINENO}(${FUNCNAME[0]}): '
# for profiling, you may use the following
#PS4='+ $(date "+%s.%N") ${BASH_SOURCE}@${LINENO}: '

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
shopt -s globstar
# set extended glob (pattern matching)
shopt -s extglob
# expand variables in paths when performing tab completion
shopt -s direxpand
# auto-correct minor spelling errors on filepath tab completion
shopt -s dirspell

# to enable forward search command with Ctrl-s
stty -ixon

# ensure my bin at front of PATH
[[ ":${PATH}:" == *:$HOME/bin:* ]] &&
    PATH=$(echo -n $PATH | awk -v RS=: -v ORS=: -v mypath=$HOME/bin \
           '$0 == mypath {next} {print} END {printf("\b")}')
PATH="$HOME/bin${PATH:+:$PATH}"
# add $HOME/.local/bin
[[ ":${PATH}:" == *:$HOME/.local/bin:* ]] || PATH="$HOME/.local/bin${PATH:+:$PATH}"
# pyenv bin
declare -x PYENV_ROOT="$HOME/.pyenv"
[[ ":${PATH}:" == *:$PYENV_ROOT/bin:* ]] || PATH="$PYENV_ROOT/bin${PATH:+:$PATH}"
eval "$(pyenv init -)"
_latest_py_version=$(pyenv versions --bare --skip-aliases | sort | head -1)
[[ $_latest_py_version ]] || _latest_py_version=system
pyenv shell $_latest_py_version && unset _latest_py_version
# autojump
[[ -s /home/naitree/.autojump/etc/profile.d/autojump.sh ]] && source /home/naitree/.autojump/etc/profile.d/autojump.sh
# thefuck
eval $(thefuck --alias f)
# direnv
eval "$(direnv hook bash)"

# do not include `-pedantic`, it warns casting from (void*) to function pointer
# export this variable to environ, so as to be used in makefile
declare -x CDBFLAGS='-ggdb3 -Wall -Wextra -Wshadow -Wpointer-arith -Wcast-qual -Wstrict-prototypes'

cd() {
    if [ $# -eq 0 ]; then
        builtin cd
        return $?
    fi
    if [ -e "$(readlink -e "${!#}")" ]; then
        builtin cd "$@"
    elif [[ "${!#}" == +(.)* ]]; then
        declare dir=${!#//../../}
        declare x=$(($#-1))
        builtin cd "${@:1:$x}" "$dir"
    else
        builtin cd "$@"
    fi
}

# display where the shell function is defined
whereisfunc() {
    declare ret=0
    shopt -s extdebug
    declare -F "$1" || ret=1
    shopt -u extdebug
    return $ret
}

# vim:ft=sh
