# .bashrc

# Source global definitions
if [ -f /etc/bashrc ]; then
    . /etc/bashrc
fi

# Uncomment the following line if you don't like systemctl's auto-paging feature:
# export SYSTEMD_PAGER=

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

# Set colorful command outputs only on colorful terminals.
# dircolors --print-database uses its own built-in database
# instead of using /etc/DIR_COLORS.  Try to use the external file
# first to take advantage of user additions.  Use internal bash
# globbing instead of external grep binary.
use_color=true
safe_term=${TERM//[^[:alnum:]]/?}   # sanitize TERM
match_lhs=""
[[ -f ~/.dir_colors   ]] && match_lhs="${match_lhs}$(<~/.dir_colors)"
[[ -f /etc/DIR_COLORS ]] && match_lhs="${match_lhs}$(</etc/DIR_COLORS)"
[[ -z ${match_lhs}    ]] \
    && type -P dircolors >/dev/null \
    && match_lhs=$(dircolors --print-database)
[[ $'\n'${match_lhs} == *$'\n'"TERM "${safe_term}* ]] && use_color=true

if ${use_color} ; then
    # Enable colors for ls, etc.  Prefer ~/.dir_colors #64489
    if type -P dircolors >/dev/null ; then
        if [[ -f ~/.dir_colors ]] ; then
            eval $(dircolors -b ~/.dir_colors)
        elif [[ -f /etc/DIR_COLORS ]] ; then
            eval $(dircolors -b /etc/DIR_COLORS)
        fi
    fi

    alias ls='ls --color=auto'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

unset use_color safe_term match_lhs

# colored GCC warnings and errors
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'
# better yaourt colors
export YAOURT_COLORS="nb=1:pkg=1:ver=1;32:lver=1;45:installed=1;42:grp=1;34:od=1;41;5:votes=1;44:dsc=0:other=1;35"
export LINES COLUMNS
# control less(1) behaviors
# -X leaves file contents on the screen when less exits.
# -F makes less quit if the entire output can be displayed on one screen.
# -R displays ANSI color escape sequences in "raw" form.
# -S disables line wrapping. Side-scroll to see long lines.
# -i enables case-insensitive search.
export LESS='-iXFR'

alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias e='gvim'
alias xo='xdg-open'
alias re='readlink -e'
alias pav='pavucontrol'
# no emacs keys
alias info='info --vi-keys'
# rm interactively, for safety
alias rm='rm -i'
# confirm before overwriting something
alias cp="cp -i"
# use git diff for better
alias diff='git diff --no-index'
# human-readable sizes
alias df='df -h'
alias more=less

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth
# history list shows timestamp
HISTTIMEFORMAT='%F %T '
# because each timestamp takes a separate line in $HISTFILE,
# to make history list and history file contain the same lines
# of history, $HISTFILESIZE should double $HISTSIZE
HISTSIZE=8192
HISTFILESIZE=16384

# append to the history file, don't overwrite it.
# this is for safety concerns. If multiple bash were killed
# simultaneously and each overwrite the $HISTFILE, race
# condition may result in $HISTFILE truncated to zero.
shopt -s histappend
# do not clear input when history substitution failed to match.
# because a failed substitution input does not count as a failed command,
# Ctrl-P doesn't work.
shopt -s histreedit
# concatenate multiline command into one line in history, to ease re-editting
shopt -s cmdhist

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize
# check if the remembered command path exists before executing it
shopt -s checkhash
# print background job status (if any) alongside the "There are stopped jobs" line
shopt -s checkjobs
# unset `force_fignore`, we don't want to ignore any files.
# we are managing a filesystem, not some source code repo.
shopt -u force_fignore
# to avoid surprising comparison result caused by unexpected locale collating order,
# we ignore locale's collating sequence definition in range expression
shopt -s globasciiranges
# set LC_COLLATE=C to collate in strict numeric order
export LC_COLLATE=C
# completing hostname on tab completion
shopt -s hostcomplete
# `#` char acts as comment char, as usual (set by default)
shopt -s interactive_comments
# do not tab-complete on an empty line
shopt -s no_empty_cmd_completion
# subshell inherits `-e` option if set
shopt -s inherit_errexit
# exit status of pipeline should reflect the failing commands
set -o pipefail
# default editor, viewer and browser
export EDITOR=vim
export VIEWER=vim
export BROWSER=google-chrome

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# put cwd in PS1 if we are in terminal,
# otherwise put cwd atop pseudo-terminal window
if [[ $(tty) == *pts* ]]; then
    # powerline configs
    # disable PS2 PS3 modification to speed up
    #POWERLINE_BASH_CONTINUATION=0
    #POWERLINE_BASH_SELECT=0
    . /usr/lib/python3.7/site-packages/powerline/bindings/bash/powerline.sh
else
    # `\e]2;-----\a part is for title bar
    # \[-----\] part does not occupy screen space
    # \e[---m part is color code
    # add git repo status to ps1
    source ~/.git-prompt.sh
    __jobnums() {
        # exclude autojump background job
        # XXX this is actually weird: according to its code,
        #  autojump background job should have dettached from shell
        # seesion when launched. Thus it shouldn't even show up in jobs
        # list in the first place !!!
        declare jobnums=$(jobs -p | jobs -x grep -v %'( autojump'  | wc -l)
        [[ $jobnums -gt 0 ]] && echo -n "$jobnums:"
    }
    # keep only the last two components of pathname
    PROMPT_DIRTRIM=2
    # user@host:$PWD:n:(branch)$
    PS1='\[\e[33;1m\]\u@\h:\w:$(__jobnums)\[\e[30;1m\]$(__git_ps1 "(%s)")\[\e[33;1m\]$ \[\e[0m\]'
fi

# more delicate info in debug prompt
PS4='${BASH_SOURCE[0]}@${LINENO}(${FUNCNAME[0]}): '
# for profiling, you may use the following
#PS4='+ $(date "+%s.%N") ${BASH_SOURCE}@${LINENO}: '

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
shopt -s globstar
# set extended glob (pattern matching)
shopt -s extglob
# expand variables in paths when performing tab completion
shopt -s direxpand
# auto-correct minor spelling errors on filepath tab completion
shopt -s dirspell

# to prevent fucking with forward search (C-s)
stty -ixon

# ensure my bin at front of PATH
[[ ":${PATH}:" == *:$HOME/bin:* ]] &&
    PATH=$(echo -n $PATH | awk -v RS=: -v ORS=: -v mypath=$HOME/bin \
           '$0 == mypath {next} {print} END {printf("\b")}')
PATH="$HOME/bin${PATH:+:$PATH}"
# add $HOME/.local/bin
[[ ":${PATH}:" == *:$HOME/.local/bin:* ]] || PATH="$HOME/.local/bin${PATH:+:$PATH}"
# pyenv bin
declare -x PYENV_ROOT="$HOME/.pyenv"
[[ ":${PATH}:" == *:$PYENV_ROOT/bin:* ]] || PATH="$PYENV_ROOT/bin${PATH:+:$PATH}"
eval "$(pyenv init -)"
# jenv bin
declare -x JENV_ROOT="$HOME/.jenv"
[[ ":${PATH}:" == *:$JENV_ROOT/bin:* ]] || PATH="$JENV_ROOT/bin${PATH:+:$PATH}"
eval "$(jenv init -)"
# autojump
[[ -s /home/naitree/.autojump/etc/profile.d/autojump.sh ]] && source /home/naitree/.autojump/etc/profile.d/autojump.sh
# thefuck
eval $(thefuck --alias f)
# direnv
eval "$(direnv hook bash)"

# do not include `-pedantic`, it warns casting from (void*) to function pointer
# export this variable to environ, so as to be used in makefile
declare -x CDBFLAGS='-ggdb3 -Wall -Wextra -Wshadow -Wpointer-arith -Wcast-qual -Wstrict-prototypes'

cd() {
    if [ $# -eq 0 ]; then
        builtin cd
        return $?
    fi
    if [ -e "$(readlink -e "${!#}")" ]; then
        builtin cd "$@"
    elif [[ "${!#}" == +(.)* ]]; then
        declare dir=${!#//../../}
        declare x=$(($#-1))
        builtin cd "${@:1:$x}" "$dir"
    else
        builtin cd "$@"
    fi
}

# display where the shell function is defined
whereisfunc() {
    declare ret=0
    shopt -s extdebug
    declare -F "$1" || ret=1
    shopt -u extdebug
    return $ret
}

colors() {
    local fgc bgc vals seq0

    printf "Color escapes are %s\n" '\e[${value};...;${value}m'
    printf "Values 30..37 are \e[33mforeground colors\e[m\n"
    printf "Values 40..47 are \e[43mbackground colors\e[m\n"
    printf "Value  1 gives a  \e[1mbold-faced look\e[m\n\n"

    # foreground colors
    for fgc in {30..37}; do
        # background colors
        for bgc in {40..47}; do
            fgc=${fgc#37} # white
            bgc=${bgc#40} # black

            vals="${fgc:+$fgc;}${bgc}"
            vals=${vals%%;}

            seq0="${vals:+\e[${vals}m}"
            printf "  %-9s" "${seq0:-(default)}"
            printf " ${seq0}TEXT\e[m"
            printf " \e[${vals:+${vals+$vals;}}1mBOLD\e[m"
        done
        echo; echo
    done
}

ex() {
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xjf $1   ;;
      *.tar.gz)    tar xzf $1   ;;
      *.bz2)       bunzip2 $1   ;;
      *.rar)       unrar x $1     ;;
      *.gz)        gunzip $1    ;;
      *.tar)       tar xf $1    ;;
      *.tbz2)      tar xjf $1   ;;
      *.tgz)       tar xzf $1   ;;
      *.zip)       unzip $1     ;;
      *.Z)         uncompress $1;;
      *.7z)        7z x $1      ;;
      *)           echo "'$1' cannot be extracted via ex()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

# vim:ft=sh
