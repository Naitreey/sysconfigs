#!/bin/env python3
#
# 首先保证所有修改和最底层的 submodule 的修改已经提交.
# 对于 modified working tree, 若不是 submodule, 则报错退出, 若是 submodule 则进入处理.
# 对于 modified index, 报错退出.
# 对于 untracked, 若是 git repo 则不处理, 否则报错退出.
#
# 对于每层 repo, 如果有 submodule commit 为 modified 状态, 保证 submodule up-to-date,
# 然后将 new submodule commit 提交 (配以必要的 commit message).
#
# 对于每层 repo, 保证 up-to-date: checkout master, fetch remote tracking
# branch, 若有更新, merge with master, 若没有, 直接 push 至 remote.
# merge 时, 若没有 merge conflict, 让用户检查并确认 merge 效果, 若有 merge conflict,
# 报错退出.
#
# 对于 remote 是 github 上且不是自己的 repo, 不去保证 up-to-date, 对于自己 repo,
# 要保证 up-to-date

from functools import update_wrapper
from io import StringIO
from os.path import relpath
from pathlib import Path
from shlex import split
from textwrap import indent
from urllib.parse import urlparse
from subprocess import check_call, CalledProcessError
import os
import sys

from git import Repo, GitCommandError, Actor

def version_check():
    required = (3, 6, 0)
    if sys.version_info < required:
        print("minimal python version required: %r" % required)
        sys.exit(1)

def colored_git(func):
    """
    Set ``color.ui == always`` in local context.
    """
    def wrapper(repo, *args, **kwargs):
        with repo.config_reader("repository") as reader:
            setting = reader.get("color", "ui", fallback="auto")
        with repo.config_writer("repository") as writer:
            writer.add_section("color")
            writer.set("color", "ui", "always")
        try:
            func(repo, *args, **kwargs)
        finally:
            with repo.config_writer("repository") as writer:
                writer.add_section("color")
                writer.set("color", "ui", setting)
    return update_wrapper(wrapper, func)

def print_msg(msg, level=0):
    print(indent(msg, prefix="  "*level), end="")

def section(msg):
    print_msg(msg, level=0)

def subsection(msg):
    print_msg(msg, level=1)

def subsubsection(msg):
    print_msg(msg, level=2)

class SyncError(Exception):
    pass
class UntrackedFileError(SyncError):
    pass
class BareRepositoryError(SyncError):
    pass
class DirtyState(SyncError):
    pass
class DirtyWorkingTree(DirtyState):
    pass
class DirtyIndex(DirtyState):
    pass

class MyStuff(Repo):

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

    def _ensure_branch(self, branch):
        # ensure head not detached and pointing to `branch` already
        if not self.head.is_detached and self.head.ref.name == branch:
            return
        # abort checkout if working tree or index has changes
        if self.is_dirty():
            raise DirtyState(f"{relpath(self.working_dir)}")
        else:
            self.branches[branch].checkout()

    def _check_untracked(self):
        untracked = self.untracked_files
        if not untracked:
            return
        for file in untracked:
            p = Path(self.working_dir, file)
            # skip untracked git repo
            if p.is_dir() and (p/".git").is_dir():
                continue
            else:
                raise UntrackedFileError(f"{relpath(p)!s}")

    def _check_index(self):
        for diff in self.index.diff(self.head.commit):
            if diff.a_mode == 0o160000:
                continue
            else:
                raise DirtyIndex(f"{relpath(self.working_dir)}")

    def _check_working_tree(self):
        for diff in self.index.diff(other=None):
            # 0o160000 is gitlink, which is used by submodule object
            # skip modified submodule object
            if diff.a_mode == 0o160000:
                continue
            else:
                raise DirtyWorkingTree(f"{relpath(self.working_dir)}")

    def _is_ignored_submodule(self, sm):
        url_scheme = urlparse(sm.url).scheme
        # ignore uninitialized module
        if not sm.module_exists():
            return True
        # assume local submodules are mine
        elif not url_scheme or url_scheme == "file":
            return False
        # assume remoet submodules with my name in its url are mine
        elif "naitreey" in sm.url.lower():
            return False
        # otherwise it's not mine
        else:
            return True

    def _commit_submodule_changes(self):
        do_commit = False
        author = committer = Actor("Naitree Zhu", "naitreey@gmail.com")
        # commit submodule changes
        with StringIO() as commit_msg:
            commit_msg.write("update submodules\n\n")
            for sm in self.submodules:
                if self._is_ignored_submodule(sm):
                    continue
                sm_stuff = MyStuff(sm.abspath)
                sm_stuff.sync_with_remote()
                if sm.binsha != sm_stuff.head.commit.binsha:
                    do_commit = True
                    commit_msg.write(self.git.submodule("summary", "--", sm.path))
                    sm.binsha = sm_stuff.head.commit.binsha
                    self.index.add([sm])
            if do_commit:
                self.index.commit(commit_msg.getvalue(),
                                  author=author,
                                  committer=author,
                                  skip_hooks=True, # skip pre-commit hook is safe
                                                   # because author is set above
                                                   # and annex-ed file shouldn't
                                                   # be present on index
                                  )

    def _pull_remote_changes(self, tracking_branch):
        remote_repo = tracking_branch.split("/")[0]
        # fetch remote changes
        fetch_info = \
            self.remotes[remote_repo].fetch()[tracking_branch]
        # merge remote changes
        if not self.is_ancestor(fetch_info.commit, self.head.commit):
            subsection(f"Merging {tracking_branch} into {self.head.ref.name}:\n")
            fast_forward = (self.head.commit ==
                            self.merge_base(self.head.commit, fetch_info.commit)[0])
            try:
                if fast_forward:
                    output = self.git.merge(fetch_info.name,
                                            ff_only=True).rstrip()
                else:
                    output = self.git.merge(fetch_info.name,
                                            no_ff=True,
                                            no_commit=True).rstrip()
            except GitCommandError:
                subsection("Merge failed, terminating...\n")
                sys.exit(1)
            else:
                if output:
                    subsubsection(output+"\n")
                subsection("Merge succeeded.\n")
            # if non-fast-forwardable, let user check status & diff, then commit
            if not fast_forward:
                subsection(self.git.status())
                subsection(self.git.log(
                    "--left-right",
                    "--oneline",
                    f"{self.head.ref.name}...{tracking_branch}").rstrip()+"\n")
                subsection(self.git.diff(cached=True).rstrip()+"\n")
                try:
                    if input("Is this ok [Y]es/[N]o ? ").lower().startswith("y"):
                        self.index.commit(f"merged new commits from {tracking_branch}",
                                          parent_commits=[self.head.commit,
                                                          fetch_info.commit],
                                          head=True, skip_hooks=True)
                        self.head.reset(index=True, working_tree=True)
                    else:
                        sys.exit(0)
                except EOFError:
                    sys.exit(0)

    def _push_local_changes(self, tracking_branch):
        remote_repo, remote_branch = tracking_branch.split("/")
        # push back new changes
        remote_commit = self.head.ref.tracking_branch().commit
        head_commit = self.head.commit
        # git thinks A is ancestor of B even if A == B
        if (self.is_ancestor(remote_commit, head_commit) and
            remote_commit != head_commit):
            subsection(f"Pushing {self.head.ref.name} to {tracking_branch}\n")
            self.remotes[remote_repo].push(f"{self.head.ref.name}:{remote_branch}")

    def _sync_with_remote_annex(self):
        if self._annex_exists_and_initialized():
            subsection("Copying annex-ed files\n")
            try:
                check_call(split("git annex copy --to=storage-bup"
                                 " --not --in=storage-bup --jobs=4"),
                           cwd=self.working_dir)
            except CalledProcessError:
                subsection("error in syncing annex-ed files, terminating...\n")
                sys.exit(1)

    def _annex_exists_and_initialized(self):
        try:
            return (Path(self.git_dir, "annex").is_dir() and
                    self.branches['git-annex'])
        except IndexError:
            return False

    # ---------- public APIs -----------

    def check_semi_clean(self):
        section(f"Checking status of {relpath(self.working_dir)}\n")
        self._ensure_branch("master")
        self._check_untracked()
        self._check_index()
        self._check_working_tree()
        for sm in self.submodules:
            if self._is_ignored_submodule(sm):
                continue
            MyStuff(sm.abspath).check_semi_clean()

    @colored_git
    def sync_with_remote(self):
        self._commit_submodule_changes()
        section(f"Syncing {relpath(self.working_dir)}\n")
        tracking_branch = self.head.ref.tracking_branch().name
        self._pull_remote_changes(tracking_branch)
        self._push_local_changes(tracking_branch)
        self._sync_with_remote_annex()

def main():
    version_check()
    mystuff = MyStuff()
    if mystuff.bare:
        raise BareRepositoryError
    mystuff.check_semi_clean()
    mystuff.sync_with_remote()

if __name__ == '__main__':
    main()
