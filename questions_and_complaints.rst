Question
--------
- 是否有安静的编程环境? 技术与非技术人员是否在同一个办公室?

- 是否注重代码质量? 是否注重代码可读性? 是否进行 code review? 是否(定期)进行代码重构?

- 项目代码是否有明文的 coding guideline?

- 代码是否有适当的注释和/或文档?

- 用什么写文档? markdown, rst, latex, msword?

- 你们使用的 VCS 是什么? git? svn?

- 用什么写代码? vim? sublime text?

- 用什么操作系统? linux? mac? windows?

- 加班是否频繁?

- 加班是否有补偿? 加班费或调休?

- 偶尔加班可以理解. 但加班是否以 11 点为限?

- 是否热爱科学和技术? 聊天时讨论的话题更注重于相互传递有价值的知识、信息从而共同提高,
  还是仅仅图个乐呵, 随便瞎聊聊, 开开玩笑之类的?

- 是否因为加班而麻痹, 导致加班是低效的, 并不是在抓紧时间解决问题, 而是慢悠悠地边聊天边工作?

- 工作用的显示器配置如何? 能否配置 23"/24" 显示器?

- Do you track the latest technology and are you enthusiastic about using and deploying
  the latest great technology into your work flow and your product?

- Can you make a build in one step?

- Do you make daily builds?

- Do you have a bug database?

- Do you fix bugs before writing new code?

- Do you have an up-to-date schedule?

- Do programmers have quiet working conditions?

- Do you use the best tools money can buy?

- Do you have testers?

- Do new candidates write code during their interview?

- Do you do hallway usability testing?

能力, 优势, 经验
----------------
- 负责整个产品开发:
  * 涉及多方面知识, 学习能力强
  * 设计经验
- 独立进行了后台业务逻辑从 mongodb 至 elasticsearch 的迁移和重构.

- 缺点是分散, 因时间关系多个方面的知识浅尝辄止, 缺少深入研究.

- 十分看重代码质量，产品质量。
  重构是我主动提出独立进行的。这也是我离开的重要原因，他们完全不在乎这些。只在乎项目，钱。

- 为什么离开？我想做有意义有价值的产品。给政府做产品都不用。没有竞争, 就没有追求更好的
  动力, 更别提追求极致.

Problem
--------
- 学习进度太慢 (加班太多且低效, 没有时间看书)

- 学习战线太长, 没有一种知识足够深入, 甚至一些方面 (例如 js) 很长时间连基本概念都不了解就
  强行使用

- 强调知识广度但忽略知识深度导致粗糙, 更重要的是导致了不合适、不合理、低效、重复造轮子的
  决定和工作. 我们多花时间深入学习, 很大程度上可以避免自己给自己挖坑, 从而避免以后浪费时
  间去填坑. 很多时候是我们自己给自己挖坑, 而不是别人. 然而坑既然存在, 总是会跳进去的.
  总是要花额外的时间去填. 反反复复, 花费的总时间和精力各方面的成本, 可能大于从一开始就学
  明白理解深刻所花的成本. 而最终修修补补的效果, 可能还不如后者好.

- 首先, 不把一种知识学清楚就埋头苦干才是浪费时间; 即使短期看来节省了时间, 但是由于自己
  无意识中挖的坑, 长久地看并没有节省时间.
  其次, 你不知道什么知识是否有用.

- 其他人不认真: 修 bug 不认真, 写代码不认真. 因为有太多事情需要同时处理, 所以容易变得粗糙
  而不认真. 代价是更多重复和时间浪费.

- 每个人能力有限, 时间有限. 同时揽太多工作自然的结果就是没有一件事可以认真做好.

- 加班太多而没有时间提高自己.

- 加班太多却低效, 加班时花1个多小时吃饭、在休息室聊天、边聊天开玩笑边工作并不罕见.

- 加班到 12 点以后是不对的, 这造成的是恶性循环.

- 代码质量问题见上.

- 办公室太吵.

- 经常是在赶工, 赶进度, 着急, 催命, 加班加点, 通宵. 这样赶出来的代码必然是混乱的,
  仅仅是能用而已. 而赶工之后也不注重对那些糟糕的代码进行重构优化, 任由其拖低程序效率、
  混淆程序逻辑.

- 我不认为经常加班是正常的. 如果我们必须不断地加班、熬夜才能完成工作, 那么一定是某些环节
  出了问题.

- 经常抱怨别组的代码质量, 可自己的代码质量也比较糟糕, 且从不提高. 即使他人指出也不知悔改,
  仍然懒得提高.

- 为什么要吃吃喝喝慢慢悠悠一晚上, 然后再加班、晚睡、不回家、第二天起不来?

- 我很不开心, 我不要再在吃饭上浪费时间.

- 我的一天应该是这样的, 8 小时工作, 5 小时看书; 或者 10 小时工作, 3 小时看书. 而完全不包含
  什么吃一个半小时的饭或者聊三个小时天这种无法容忍的毫无意义的行为. 这太散漫了, 我快疯了.

- 每天 8 小时工作 5 小时看书是完美, 忙时全天工作也可以. 然而花几个小时吃饭聊天是完全无法
  容忍的.

- 我非常非常讨厌通宵和熬夜. 我一定要早睡早起. 避免恶性循环. 这也要求我必须抓紧晚上的时间.
  首先是早睡早起, 然后是不把时间花在吃饭和闲聊上面.

- 我喜欢有意义的聊天. 在学校时, 我们经常一起聊物理聊数学, 感到很开心. 现在却没人聊计算机
  聊编程.

- XX 最大的问题是武断, 不严谨, 过于自信. 经常仅仅依靠自己十分有限的知识对事情下判断,
  非常自信, 却错得离谱而不自知. 其实你也有这种问题.

- 我提交代码 XX 几乎不看 (非常粗地扫一眼) 就合进去了. 可能因为没时间?
  这就是精力不够却要做多件事的后果. 每件事都做不好.

- 最近 XX 多了一个新毛病: 沉默. 对于自己不想解释不想回应的工作相关内容保持沉默. 意思是什么?
  无论是对是错, 就这么着是么? (e.g., 他的 git tag 3.6.X 全都他妈标错了. 我问他, 他只是不
  说话.)

- 你们永远在赶工. ptdx 的前端, ptd-10g, 追影的汤洪飞项目等等.

- 我活着就是为了变得更好. 我若一天没有进步, 我便一天不开心. 而我讨厌做不开心的事.

- 我受够了. 我受够了身为一个研发总要去现场擦屁股, 受够了总是有乱七八糟的临时事情要处理,
  受够了对用户不停的欺骗和公司不停的作死, 受够了无节制的加班.

- 加班太多, 没有时间看书. 我很烦. 你们触及了我的底线. 我很生气.

- 没有发展空间, 一天到晚琐事缠身, 一会儿测试找你解决一个问题, 一会儿私有云那边又有问题
  要解决, 一会儿 vds 二合一又要解决问题... 一天什么也干不了. 少有时间深入研究一样东西,
  少有时间完善和解决一些长期存在的问题. (e.g., build repo 里大文件存储的问题.)

- 作死. 没有准备好产品 (e.g., PTD, PTD-10g 测试不通过、不稳定等等)
  就逼着、催着发货. 此谓作死.

- 作死. bugs 堆积如山 (e.g., PTA 3.6.12 版本), 现场出了那么多问题. 不优先修 bug,
  却还要开发新功能. 此谓作死.

- 别挤兑人家别的公司, 说人家有道德问题, 自己却比较诚实. 自己成天欺骗客户, 睁眼说瞎话
  (海关现场、教育网现场、张东大奇哥亲口所言等等), 有何道德优越感可言?

- 内存和 CPU 使用不够高效, 不去优化程序以减少资源占用, 而是使用 watchdog 来掩盖问题.
  (结果还搞得更不稳定.)

- 我要去道理和常识不被忽略而是被遵守和执行、大家都对自己的工作负责的地方工作.

- 都什么时候了, 还不换 python2.7? 还有 centos 7, mongodb. 懒死了.

- 为什么更新数据库版本、beanstalkd、python 版本成本很高? 很大程度上是因为代码里毫无封装
  迹象. 怎么无脑怎么写. 各种 beanstalkc.Connection, pymongo.Connection 连接裸奔,
  数据库操作毫无封装, 散布得到处都是. 一处要改, 处处都要改.

- 代码版本混乱, 发布中在使用的程序存在各种各样的版本. 结果自己这边都没有用户的版本 (比如,
  3.6.4). 而且还要跨那么多版本升级. 想什么呢?

- 我讨厌 "拍脑门" 的做决定方式. 经常很草率, 经常很简单粗暴, 不谨慎,
  从来不评估一个决定可能引起的潜在影响, 只有出问题时才发现有问题.

- 各个方面都很混乱 (代码规范, 通用操作, 文件存储), 缺乏统一指定的规则, 每个人想怎么做都行.

- 临时的事情太多, 导致规划失去了意义. 版本规划之后, 还会是不是添加新需求. 在开发一个版本
  的过程中, 还得去做一些临时的事 (例如去现场, 做加密, 等等乱七八糟的事情).

- 加班为日常, 为什么没有加班工资.

- 忽悠之前先把功能和产品做好行么? 你知不知道我他妈每次在用户现场都很烦?

- 加班加得很烦, 不想再加班. 看垃圾代码看得很烦, 不想看垃圾代码.

- 加班加得连自己的生活都没有了. 加班加得自己该做的很多事情都要女朋友去做 (搬家收拾东西等).
  你们真觉得这样合适? 这叫做自私. 因为很多时候你们的加班并不高效, 而是有说有笑. 并没有
  充分利用时间, 很多时候反而是在荒度时间. 让工作高效, 把时间省出来陪伴家人, 约约朋友,
  提高自己, 等等, 会更有意义.

- 你们一切的技术选择和工作方式都是围绕着 "懒" (所谓的简单粗暴) 来决策的. e.g.,
  bottle, python 只用函数几乎从来不用类, html+裸ajax, 版本更新策略, 等等.
  这种简单本质上是逻辑上的粗糙, 实现和维护起来一点也不简单, 但是足够粗暴.

- My logic is quite simple. I do what I find interesting. If I found it boring, eventually
  I quit doing it and start doing something else.

- 我不想继续写追影, 因为我从中获取不到有用的知识, 学习不到优质的代码、高效的逻辑、
  合理的设计. 我每天面对的就是一个懒逼靠着一知半解拼凑起来的畸形的玩意儿. 居然我
  还得想办法让它稍微正常一点. 还他妈不如重写呢.

- When working became a waste of time, you know it's time to leave.

- 给你们重构代码有什么用? 根本没人维持. 仍然由着自己的性子来.

- 总是出现这种情况: 什么东西突然需要, 而且要得很急, 疯狂加班完成之后, 人家又不要了, 或
  不着急了. (e.g., 硬盘加密, 汤洪飞项目, 灌装笔记本, 等等)

- 经常是突然需要什么东西. 你怎么不提前说?

- 加密版:

  1. 版本规划里根本没有, 写代码时根本没考虑过. 没人能保证新版本没问题.

  2. 没人测试, 我写好之后直接就用.

- 你们自己看看这页面代码吧. 都是什么乱七八糟的.

- 在这里待得现在我脑子里很乱, 脑子不清醒, 有太多杂七杂八的麻烦、事情. 头疼, 不舒服, 无法让自己
  放松下来.

- 连续两天去天融信 (一次晚上, 一次突然, 两次都没吃饭), 让我彻底受够了.

- 我是程序员么? 这段时间我都在干嘛? (去天融信, 测弄加密追影, 海关, 等等)

- 这个公司做事没有规划, 没有计划, 总是一阵一阵的 (spantaneous). 这是经常加班的重要原因.

- 咱们的产品就没有一次是没有问题的. 没有一次不需要调整、忽悠、现场研发.
  而且在这种情况下, 还要不停地接新项目. 不停地挖新的坑.

- 升级包未经测试就发布 (催! 催! 催!), 升级随意, 版本混乱.

- 出什么临时版本?? 把代码和分支都弄乱了.

- 每个客户都要定制, 定个毛, 烦死了. 要是大众消费品, 就一个版本爱买不买.
  做得能不能用都能卖出去, 所以产品质量才会这么烂, 因为不是生存的底线. 要是大众消费品, 做得烂就
  没人买, 才会注重质量.
  你不可能贿赂普通消费者, 然后塞给他们一个破烂、不能用的玩意儿.

- 破事一大堆, 升级包, 售后, 测试问这个, 别人又问别的. 都不能干一件整事!!

- 把代码写得这么隔应人到底有什么好处?

- 我讨厌你们的代码, I'm leaving.

- 你们说只顾自己开心的工程师是自 high, 不是真正在寻找最合适的解决问题方法.
  你们自己呢? 成天地在公司待着也是为了自 high 不是么? 因为你们不是在高效地认真地
  探讨问题, 不是在高效地完成工作, 而是在聊天, 乐呵, 众人哄哄闹闹, 没有一点效率和认真的
  态度, 不过是群 high 而已.

- 不要对我报太大期望, 因为我总有一天会离开.

- 那么多严重的 bugs (重启、内存泄漏、linux 鉴定器不可用等) 不修复, 却总是加一些没用的
  新功能, 边边角角的修改, 你们在想什么?

- 你从来没有明确把陈兆阳指派给我. 也就是说, 我从来不知道我的任务之一是给陈兆阳安排工作.
  而且我没时间、没有兴趣做这种给别人安排工作还要检查别人代码, 来来回回不如我自己写来得
  高效一些.

- 你们东发一个升级包西发一个升级包, 教育网现场调, 等等, 还不都是临时的修改? 谁知道你们
  哪些修改有记录, 哪些没有? 你居然还有脸堂而皇之地在这里说对误报之类的修改当然在版本升
  级中, 而且一定要可控??

- 添加新功能, 引入新东西, 却没有完善的影响性评估和分析, 基本靠感觉, 只有发现问题才去处
  理 (或者仍然不处理). e.g., 很久以前加密版就用了 grub2, 结果到现在 `deployment` 都还只
  支持 grub 0.97.

- 流程随意, 无设计文档、无正式的设计讨论和会议之类的, 口头说定就算. 之后有变化都不通知,
  信息传递有问题. 为什么和天融信讨论的需求设计和特殊要求我都不知道? 要不是侯军问起,
  还有李慧芬说到, 我都不知道.

- 程序逻辑、程序操作之间的界限不清, 带来的只会是可见的短期的成本减少和长期维护成本的提高.
  e.g., 追影所有 rpm 都强制安装一遍. 我的 dracut 版本被不知不觉覆盖掉了. 为了解决这种 bug
  所浪费的时间足够开发一套逻辑合理界限明确的 unintrusive 的 rpm 安装机制了.

- 这个公司的企业文化鼓励作息不规律, 因而鼓励加班, 因而鼓励低效, 因而鼓励晚睡晚起.

- 李林哲不是一个仔细、认真的人, 陈兆阳不是一个仔细、认真的人, 我不可能给这么多人擦屁股,
  我要撤了.

- 连测试和出货流程都是乱的, 为什么我自己装的加密追影直接拿去出货了?
  为什么侯军可以不经过测试直接从研发手里出货验收? 为什么侯军可以直接叫测试人员去现场
  解决问题?

- 林哲让陈兆阳在非安天和金山版里屏蔽 yara, 而不是在基础版里删除 yara, 然后只在安天和
  金山版里添加 yara. 这逻辑简直让人无语了. 他还敢说这是因为修改起来简单.
  如何定义 "简单"、"合理", 可能是我和你们最大的观点不同之处了.

- 你们解决问题的方式不是去修正错误的决策, 而是在错误的决策之上叠加更多错误的决策.
  这是你们把代码和产品搞得乱七八糟的重要原因.

- 一年过了 3/4 了, 现在想起来 OKR 了? 哦, 为了补救这一年, 还要 "冲刺"?
  OKR? 我没什么 OKR. 我只想做到加新功能之前, 先把 bug 都修掉. 我只想抓紧时间看书,
  快点离开你们这些破程序员.

- 你们有什么资格把代码写成那副模样还指望别人给你们填坑呢? 我不是来给你们填坑的.

- 一个 yara 的屏蔽, 弄得到处都是: 页面上检查版本来屏蔽, OEM 脚本里屏蔽, etc.

- 你们从来不是把一个成熟的稳定的东西学明白、用好、用得高效, 而是不断地尝试新鲜玩意儿,
  觉得不好用? 再玩儿一个呗. 不断地展开, 从来不深入. 你们以为自己把工具学明白了啊?
  你们浪费了那些好东西, 你们根本不会用, 只会浅尝辄止, 妄自尊大, 没有自知之明.
  你们去看看这个世界上最大几个公司, 他们在用什么数据库. 那些传统的关系型数据库被他们
  抛弃了没有? 你们好聪明啊是不是? 还是太蠢, 太浅薄, 从来不肯好好沉下心来学习一门知识?

- 每个读了你们代码的都发现代码很恶心, 你们每次写出来的新代码都很恶心. 无论是 PTA 还是
  新的 PTD, 你们永远是在生成新的恶心代码, 永远是先破坏得乱七八糟, 再尝试补救.
  我讨厌这种模式, 我腻了给你们修补垃圾.

- 每次修改 cp 都要重新梳理逻辑. 因为代码实在是太乱了.

- 我不认同你们的技术决策 (e.g., mongodb) 和工作方式.

- 遇到问题不是解决问题而是掩盖问题. e.g.,
  watchdog
  各种功能不该有时不是去掉功能, 而是到处屏蔽 (e.g., yara)
  日志占用空间太多增长太快, 不是靠优化日志结构和输出内容, 而是靠每天删除日志.

- 流程混乱: 研发可以做出货生产, 测试可以做出货生产.

- 太多意识流代码: 除了作者本身, 别人很难理解代码的含义.

- 非常讨厌你们在设计和决策时把事情总是想得很简单, 总是 "没什么问题啊", "这个简单",
  "XXX就完了", 显得自己好像什么都懂什么都清楚似的. 然而事实上你们根本没有仔细思考,
  没有把潜在的问题都想清楚就做决定. 直到别人遇到问题时才发现这么做是有坑的.
  我劝你们别总把事情想得那么简单, 因为这样只是无知人的自大而已.

- 我们进行的版本规划和开发计划唯一的目的就是为了被打破和被作废的. 你们只要不停止
  接手各种临时的事务, 就别想着做什么狗屁规划了. 纯属浪费时间.

- 作出的修改从来不去考虑涉及的所有影响. 对未经测试的方案不可理解的盲目自信.
  e.g., 你们居然能够认为 N 个版本之前的分布式部署方案在经历这么多代码修改之后仍
  能够毫不改动地仍然可用?? Are you nuts?? 完全不测试就去现场部署? 哪来的自信?
  你们这样浪费的是我的时间.

- 因为各种作死行为 (不考虑完善就开发、不测试就部署等等) 导致我动不动就要去现场,
  动不动就要远程协助. 这是对我时间的极大浪费.

- Will a truly sluggish crude programmer be a good programmer? No, I don't think so.

- OOP always matters. Failure to abstract object from myriads of relationships
  demonstrates stupidity and incompetence.

- 这个地方凑合的氛围太强烈, 没有对哪怕是 "完善" 的追求, let alone "完美". 缺少执着的态度.

- 此外, 不同部门难以合作. 在不同部门之间进行同一个产品的协作开发太难. 每个人有
  自己的想法、自己的做法, 而且无比固执, 死不悔改.

- 我讨厌记东西, 更愿意理解并自然记忆. 可惜你们的东西经常没有逻辑或逻辑过于奇葩、
  扭曲、费解, 除了你们你们作者自己之外无人能理解.

- 你们每使用一种新工具, 这种新工具都会被你们使用得很扭曲, 很难受. 原因是什么?
  因为你们缺乏规划的能力, 缺乏逻辑和统一. (e.g., JIRA)
  你们的 JIRA workflow 真够奇葩的. 正常情况下,
  ToDo -> Open -> In Progress -> Resolved -> Testing -> Passed -> Regression Testing -> Closed
  (以及其他分支流程)
  现在把所有流程都提前了. Open 成了正在开发, In Progress 成了正在测试.

- 我成天看你们 (尤其是李林哲) 装得人模狗样的, 再看看你们的代码、你们的设计,
  真他妈想揍你们.

- 看看这段代码::
    pd=$(dirname $(readlink -f $0))
    cd $pd
    exec python $pd/avl3.py $*
  这段代码, 去掉 ``cd $pd`` 或 ``$pd/`` 都导致鉴定器无法正常运行.
  这说明: 在追影里, 每一句奇葩的代码, 都有其深意.
  这叫强耦合, 所以别他妈跟我说什么代码要去耦合. 你们没资格.

- 你们不要逼脸已经不是一天两天了.

- My suggestion for you: don't be always too confident about your very limited knowledge.

- Trust me, with that quality of code, nobody's wanna stay.

- 这里的流程太混乱. 流程越正式, 事务的处理越自动化, 从而越不易出错, 从而越高效.

- 你们特别喜欢把简单自然舒服的事情弄得特别宁把. 真实一群奇葩.

- 各种各样的混乱、奇葩, 归根结底在于没有竞争, 用户不使用产品 (是否购买产品取决于受贿).
  进一步, 一个行业没有竞争, 没有进步, 没有把产品做得精益求精的需要, 我应该迅速离开这个行业.
  因为在这样的行业、这样的公司, 没有我的能力和知识的提升空间.

- 总是没有时间把一门知识弄得比较清晰之后再着手加入产品, 所以产品的质量和你们对每种知识
  的理解程度是相映的, 那就是一般般, 或者说充满了问题.

- 一个无比简单的升级代码, 我居然找了 3 天问题, 简单的 20 行代码填了 4 个坑, 这是你们代码
  质量导致灾难的极端体现::
  git log 055a5b0e8a21262231e3ed3abacf6d5fa274a9a3..f90f3fd5bc518327319ccf5ef770b83712bbba60

- 看门狗这种混蛋玩意儿居然成为了标配. 看看你们对待程序优化的德性.

- 好好的 docker 不用, 用你妈的 runc.

- 因为要做的事情太多、太分散, 所以精力不够用, 所以渐渐变得不负责任, 渐渐变得习惯不负责任,
  渐渐面对自己做错的事仍然可以面不改色、毫不在乎, 渐渐变得不要逼脸.

- 在这个公司, 正常时长下的高效工作似乎被认为是不够的, 而加班才是正常的, 才是被看好的, 才是
  努力的表现. 不加班就是不够努力. You people are so sick.

- 为什么 python 依赖不用 pip 安装, 而要复制源码? 为什么好多程序都要手工编译? 为什么不能升级
  一下新的系统而要在陈旧的系统上费劲手工添加新程序? 为什么这么蠢?

- 身为 git repo, 连个 gitignore 都没有. 建一个会死么?

- 会死么? 不把每件事做得那么恶心会死么?
  会死么?
  会死么?
  会死么?

- 怎么还管得着我用 VPN 发邮件?? 还说 VPN 不安全?

- 在这个公司, 想要简简单单地好好地写几天代码可真他妈难啊.

- 升级包可以不经过测试, 由研发直接交给客户.

- 很抱歉, 你们现在混乱的、奇葩的、低效的、重复劳动的项目制日报方式, 已经碰触了我
  厌恶的下限.

- 你们真的完全不关心自己的产品.

- 为什么离开? I wanna make great stuff. I wanna be proud of what I do.

- 这一年来, 至少有去各种现场或因为软件问题外出 20 次, 也就是说一个月的工作日都浪费掉了.
  如果你们愿意, 请继续, 我不愿意, 我撤了.

- 怨念大? 每次到现场, 那么多问题, 那么难排错, 那么难解决, 一步一个砍, 面对用户那么尴尬.
  怨念能不大么?

- 虚拟机配置里的文件格式有一些连测都没测过, 就往里写? 还跟我说是从别的地方扒下来的??
  扒下来的就可以直接使用不需要检查了? 别人问我要时我都提供的是配置文件里的列表, 你们
  脸有多厚.

- 最不能接受的是, 当面临这么多问题时, 你们完全不觉得这些是问题, 子我感觉仍然良好.
  这充分说明了我和你们的底线、观念、态度差别太大.

- 期权? 股权? 是很诱人. 但是我不太愿意接受. 用我的前途、发展潜力、工作乐趣来做交换,
  我不愿意.

- 你们根本没有使用到 mongodb 的极限, 也就是说, 你们迁移 es 的理由根本不成立. 你们十分低效
  地使用着 mongo (频繁地读写, 随便取全报告等), 请别怪 mongo 性能满足不了你们的要求.

- 在你们这里, 修 bug 永远不是高优先级的任务, 加功能才是 (进而引入更多 bug).

- 如果你们没有把追影的代码做得这么糟糕, 迁移 es 不会这么痛苦, 这么慢. 现在如果不完成
  你们还想牺牲我的年假?

- 你们把代码写得这么乱, 还理直气壮地叫我改啊? 你们负责挖坑, 我负责填坑? 滚犊子吧你们.

- 追影代码最大的特点就是别人永远记不住特定的功能在哪里实现的, 如何实现的, 无论看懂多少
  次代码, 除非是写它的你们两个自己. 为什么记不住? 因为混乱, 无清晰易懂易记忆的逻辑.
  完全得靠死记硬背才能记住. 别恶心我了.

- 你们能不能在功能迭代时顺便把没用的代码清理一下?

- 我说过了, 下次熬夜时就是我离开的时候. 只是为了休息一个应得的年假, 就得熬夜加班. 离开了.

- 我是研发, 我不是售后. 如果你们愿意做售后, 那是你们的事. 跟我无关.

- 你们仍然在使用官方已经不再支持、业界已经废弃使用的 python 版本, mongodb 版本.

- 为什么你们对自己的代码毫无要求, 对别人的代码要求如此严格? 能不能也对自己要求严格一些?
  e.g., 对深圳代码的效率 (中英文转换、hash 值计算等) 和参数命名 (hosts, modify etc.) 的
  要求都不错, 但是麻烦你们看看自己的代码、自己的配置文件、鉴定器命名, 哪里是有意义的??
  (jj, jv, item, which...) mongodb 随意读写完整报告, 甚至仅仅为了一个小更新就要 R,W,R 
  三个操作 (e.g., update_malname), 什么叫做 user_defined_sc....._identifier??
  为什么配置文件里的鉴定器名字和队列名称不一致? 你告诉我假如已知队列如何修改相应的鉴定器配置?
  要求配置不能跟代码混在一起, 配置不能是 py? 你们 avl, nsrl 之类的不是直接写死配置在代码里?

- 我靠, 我根本不想听见你们说话啊你们这帮傻逼.

- 我希望达到的、也是每一个对自己的技艺有追求的工程师希望达到的目标:
  精深而广. 而不是泛而不精.

- 你们的生活方式和你们的代码风格是一致的. 都是那种为了减肥好不容易饿了半天还要运动,
  最后随便喝上几罐可乐全给补回来了风格.

- 为什么公司内部使用的私有云升级可以那么随意? 说明白了目前不支持容器化的私有云, 为什么
  要随意升级? 这种情况下升级后出了问题有什么理由希望研发能花时间来解决?

- 曾经你们跟我扯什么界面要支持 ie8, 不能用新特性, 不能用 html5, 总之只能抱着一些早就
  过时的玩意儿较劲. 现在怎么能直接直接全换新的了? 其实很多时候是你们想就能, 你们不想
  就有各种借口不能.

- 现场支持, 奇葩项目、事务插入. 难有完整的时间深入地做本职工作, 专心写代码.

- 你们写代码做产品从来不写设计文档, 却指望一个从来没有参与设计开发的程序员给你们弄清
  这些东西、指望他能给你们填坑、给你们写这些本该你们自己写好的东西. 现在是你们的懒惰
  导致了这些各种混乱局面. 不是别人.

- 狗屁 rpms 带来的问题还不够多么? (e.g., 升级后 package 版本倒退; 强行干涉我的加密过程).
  真他妈够蠢够懒的设计.

- 这个公司太混乱了, 像一团乱麻. 今天一件事, 明天一件事. 你们有点计划没有? 你们知不知道
  一个人花一段完整的时间做一件事, 才能把它认认真真地做好? 像你们这样经常打断别人, 经常
  一件事还没做完就安排别的事, 是不是就是希望别人把事情草草糊弄完了事? 我觉得你们不是这
  样期望的. 但是很多时候你们自己就这样草草做完了事的. 因为你们同样地, 同时接手了太多、
  太杂乱的事务. 而你们, 也不过是普通的人类而已.

- 关墨辰、李林哲两位, 尤其是李林哲, 我强烈建议你们自己不懂的东西别瞎说. 对自己的知识
  不要太自信, 不要太自大, 多怀疑一下自己的理解是否正确、是否准确. 谦虚一些, 不要说话不过脑子.

- 造假, 造假. 在这个公司, 造假是很容易就选择的行为. 没能力还要装. 要不是根本没人用
  你们的产品, 造假不会这么容易.

- 给你们修个 bug 真他妈难. 这硬件 ID 多么明显的脑残设计, 死活就是不让改. 太费劲了.
  现在你们突然想通了?

- 我是研发, 我没有理由直接接触用户. 这叫没有分工. 研发必须说实话, 你们又对客户不能
  说实话. 所以你们需要能油滑地说假话的研发?

- 新上任的总裁跟我有什么关系? 有战斗力的团队不是靠加班体现出来的. 真够假的, 真能装,
  真逗啊.

- 没用的功能放着不删，废弃的代码留着堆垃圾。oem等独有的功能随意丢给主版本从不使用却
  从不停止占用资源，拖慢效率（ip信任列表等）。你们没资格嫌别人的代码低效.

- 新公司太远了，太偏僻，没吃饭的地方，没便利店.

- 你们使用工具的特点就是粗粗一用算拉倒。从不想着用好，遇到问题就觉得是工具不行换个
  工具，不想着问题出在自己身上。

- 到处都是复制粘帖的代码，也不愿意抽象封装重构一下. (e.g., 鉴定器, 各种页面)

- 如果你们当初把追影设计得像样点，代码少恶心点，我现在能这么费劲么？还他妈催催催。
  一天就知道催，你有什么资格催？

- 这公司网络质量太差。且不说没有自动翻墙，连办公网络都比较慢，有时候还会断网。

- 在这个公司工作越来越低效，越来越繁琐，障碍越来越多.

- 我不想再跟政府这些莫名其妙的需求和要求打交道

- 你们成天去保证别人的安全，自己的产品如此随意，如此不安全，你觉得这靠谱么？

- 我不知道这个公司的人想干嘛？该按流程办的不按流程办，却吃饱了撑的大兴形式主义
  (学习什么狗屁讲座前面签到后面点名，还跟什么 pvc 挂钩，我是学生么？工作时间
  到底是应该抓紧时间高效地工作还是应该附庸一切无意义的形式主义需求?)


code quality
============

李林哲
------
- 思维缺乏调理, 代码缺少自然流畅的逻辑. 不注意程序逻辑的模块化和操作的独立性.
  意识流似的编码风格, 经常凭一时任性和随意去写代码. 代码和人一样随意.
  代码逻辑混乱 (我到现在都得要读着代码去跟 cp 的逻辑), 函数职责不清,
  对量的命名、API 的规定极其随意, 缺乏组织性和统一性.

- 涉猎广泛, 但没有一样有深度; 什么都能做, 但没有一样做得好.

- for each in something

- js 代码无 ``;``

- 未通知的情况下修改别人的代码却缺乏对别人代码的完整理解 (鲁莽), 导致问题. (e.g., 对
  旧配置文件兼容但未修改 kk_analyzer 代码进行兼容)

- 错误合并不该有的修改 (鲁莽). (e.g., 合并3.6.10版本的临时 workarounds 进入 master)

- 屡教不改, 对自己的错误顽固地要死, 所以他实际上并没有那么负责. 因为他的错误影响了别人的
  工作, 自己却不去修改自己的错误. (e.g., 明确告诉过他 js 代码要加 ``;``, 却从不听, 我改
  的代码又被他插入垃圾.)

- 一意孤行, 不解释, 不说话, 无反馈.

- 每次看李林哲的代码都让人很生气.

- 大型的版本合并 (e.g., 3.6.11 -> cp01) 从来不认真检查冲突和错误修改.
  想要依赖测试人员来发现问题. 首先, 测试人员不一定能发现所有问题; 其次, 自己偷懒却要增加
  别人的工作量, 这是他的常见作风.
