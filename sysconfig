#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# vim:fileencoding=utf-8

from argparse import ArgumentParser
from colorama import Fore
from contextlib import contextmanager
from glob import iglob
from os.path import (
    abspath,
    expanduser,
    isdir,
    exists,
    lexists,
    join,
    basename,
    dirname,
    isfile,
    islink,
    commonpath,
    sep as path_sep
)
from pathlib import Path
from shutil import copytree, copy, rmtree
from subprocess import run
from shlex import split
import os
import re
import sys
import yaml
import stat

# ----------- argparse formatter fix: remove subparser metavar line.
from argparse import HelpFormatter, _SubParsersAction
class NoSubparsersMetavarFormatter(HelpFormatter):

    def _format_action(self, action):
        result = super()._format_action(action)
        if isinstance(action, _SubParsersAction):
            # fix indentation on first line
            return "%*s%s" % (self._current_indent, "", result.lstrip())
        return result

    def _format_action_invocation(self, action):
        if isinstance(action, _SubParsersAction):
            # remove metavar and help line
            return ""
        return super()._format_action_invocation(action)

    def _iter_indented_subactions(self, action):
        if isinstance(action, _SubParsersAction):
            try:
                get_subactions = action._get_subactions
            except AttributeError:
                pass
            else:
                # remove indentation
                yield from get_subactions()
        else:
            yield from super()._iter_indented_subactions(action)

# ----------- END argparse formatter fix -------------------------

DISTROS = ["ubuntu", "fedora", "arch"]

PKG_CMD = {
    # 0 - command to update package database
    # 1 - command to install package
    "arch": [
        "sudo pacman -Syy ",
        "sudo pacman -S --noconfirm ",
    ],
    "fedora": [
        "sudo dnf check-update || true ",
        "sudo dnf install -y ",
    ],
    "ubuntu": [
        "sudo apt-get update ",
        "sudo apt-get install -y ",
    ]
}

NOT_PROVIDED = object()

@contextmanager
def enterdir(dir_):
    pwd = Path()
    os.chdir(dir_)
    try:
        yield Path()
    finally:
        os.chdir(pwd)


@contextmanager
def as_user(uid, gid):
    home_dir = os.environ.get('HOME')
    # When $HOME is present, expanduser() uses it directly.
    # It has to be deleted such that expanduser() looks at
    # real uid and /etc/passwd file for home directory.
    if home_dir:
        del os.environ['HOME']
    old_ruid, old_euid, old_suid = os.getresuid()
    old_rgid, old_egid, old_sgid = os.getresgid()
    os.setresgid(gid, gid, old_sgid)
    os.setresuid(uid, uid, old_suid)
    try:
        yield
    finally:
        os.setresgid(old_rgid, old_egid, old_sgid)
        os.setresuid(old_ruid, old_euid, old_suid)
        if home_dir:
            os.environ['HOME'] = home_dir


def is_executable_file(exe):
    """
    A pre or post installation hook is executable when:
    - exec bits are set
    - file is not empty
    We can not test shebang line as hooks may be binary executables.
    """
    exec_bits = stat.S_IXUSR | stat.S_IXGRP | stat.S_IXOTH
    try:
        stat_tuple = Path(exe).stat()
    except FileNotFoundError:
        return False
    return stat_tuple.st_mode & exec_bits and stat_tuple.st_size


def is_null_file(file):
    """
    Check file is empty or does not exist at all.
    """
    try:
        stat_tuple = Path(file).stat()
    except FileNotFoundError:
        return True
    return stat_tuple.st_size == 0


def info(msg):
    print(Fore.GREEN + f"*** {msg} ***" + Fore.RESET)


def warning(msg):
    print(Fore.YELLOW + f"*** {msg} ***" + Fore.RESET)


def error(msg):
    print(Fore.RED + f"*** {msg} ***" + Fore.RESET)


def current_distro():
    distro_regex = re.compile(r"(%s)" % "|".join(DISTROS))
    with open("/etc/os-release", "r") as f:
        release_info = f.read().lower()
    match = distro_regex.search(release_info)
    if not match:
        raise UnknownDistro("The current linux distribution"
                            " cannot be recognized")
    return match.group(1)


class UsageError(Exception):
    pass


class UnknownDistro(Exception):
    pass


class DistroNotSupported(Exception):
    pass


class FormatError(Exception):
    pass


class ModuleError(Exception):
    pass


class InitError(Exception):
    pass


class ConfigModule:

    pkgsdir     = "packages.d"
    filesdir    = "files.d"
    hooksdir    = "hooks.d"
    sourcedir   = f"{filesdir}/source"

    pkgsfmt     = f"{pkgsdir}/packages-{{distro}}.yaml"
    filesfmt    = f"{filesdir}/files-{{distro}}.yaml"
    prehookfmt  = f"{hooksdir}/preinstall-{{distro}}"
    posthookfmt = f"{hooksdir}/postinstall-{{distro}}"

    def __init__(self, name, distro=None):
        """
        - ``distro`` can be a distribution name or ``None``.
          ``None`` means distribution is unspecified.
        """
        self._name = name
        self._distro = distro

    def _load_check_pkgs(self):
        pkgsfile = self.pkgsfmt.format(distro=self._distro)
        if is_null_file(pkgsfile):
            pkgsfile = self.pkgsfmt.format(distro="any")
            if is_null_file(pkgsfile):
                return []
        with open(pkgsfile, "r") as f:
            packages = yaml.load(f)
        try:
            for p in packages:
                assert isinstance(p, str)
        except Exception as e:
            raise FormatError(f"invalid format of {pkgsfile}") from e
        else:
            return packages

    def _load_check_files(self):
        filesfile = self.filesfmt.format(distro=self._distro)
        if is_null_file(filesfile):
            filesfile = self.filesfmt.format(distro="any")
            if is_null_file(filesfile):
                return []
        with open(filesfile, "r") as f:
            files = yaml.load(f)
        try:
            for config in files:
                assert isinstance(config['source'], str)
                assert isinstance(config['target'], str)
                assert isinstance(config.get("copy", False), bool)
        except Exception as e:
            raise FormatError(f"invalid format of {filesfile}") from e
        else:
            return files

    def _load_check_prehook(self):
        prehook = self.prehookfmt.format(distro=self._distro)
        if not is_executable_file(prehook):
            prehook = self.prehookfmt.format(distro="any")
            if not is_executable_file(prehook):
                return None
        return prehook

    def _load_check_posthook(self):
        posthook = self.posthookfmt.format(distro=self._distro)
        if not is_executable_file(posthook):
            posthook = self.posthookfmt.format(distro="any")
            if not is_executable_file(posthook):
                return None
        return posthook

    def _get_backup_name(self, filepath):
        get_index = lambda fn: int(Path(fn).suffix[1:])
        backup_indices = sorted(get_index(p) for p in iglob(filepath+".orig.*"))
        if not backup_indices:
            next_index = 1
        else:
            next_index = backup_indices[-1] + 1
        return filepath + ".orig.%d" % next_index

    def _rename_if_exists(self, file):
        if lexists(file):
            backup_name = self._get_backup_name(file)
            warning("{0} exists, renamed to {1}".format(
                file, backup_name
            ))
            os.rename(file, backup_name)

    def _remove_if_exists(self, file):
        if not lexists(file):
            return
        warning(f"{file} exists, removing")
        if islink(file) or isfile(file):
            os.remove(file)
        elif isdir(file):
            # symlink to directory has been excluded, we can safely remove
            rmtree(file)

    def _link(self, target, link_name):
        os.symlink(abspath(target), link_name,
                   target_is_directory=isdir(target))

    def _copy(self, source, target):
        if isdir(source):
            copytree(source, target)
        else:
            copy(source, target)

    def run_prehook(self):
        info("Running pre-installation hook")
        prehook = self._load_check_prehook()
        if prehook:
            run([prehook], check=True)

    def run_posthook(self):
        info("Running post-installation hook")
        posthook = self._load_check_posthook()
        if posthook:
            run([posthook], check=True)

    def install_packages(self):
        info("Installing packages")
        pkgs = self._load_check_pkgs()
        if pkgs:
            run(PKG_CMD[self._distro][1] + " ".join(pkgs),
                shell=True, check=True)

    def install_configs(self, backup_config):
        def copy_or_link(source, target):
            target = expanduser(target)
            os.makedirs(dirname(target), exist_ok=True)
            if backup_config:
                self._rename_if_exists(target)
            self._remove_if_exists(target)
            if config.get("copy", False):
                self._copy(
                    join(self.sourcedir, source),
                    target
                )
            else:
                self._link(
                    join(self.sourcedir, source),
                    target
                )

        info("Installing configurations")
        files = self._load_check_files()
        for config in files:
            source, target = config['source'], config['target']
            print(f"{source} --> {target}")
            if config.get("asroot", False):
                with as_user(uid=0, gid=0):
                    copy_or_link(source, target)
            else:
                copy_or_link(source, target)

    def install(self, backup_config):
        self.run_prehook()
        self.install_packages()
        self.install_configs(backup_config=backup_config)
        self.run_posthook()

    def show(self):
        # Ok, I'm being lazy here.
        with enterdir(".."):
            run(["tree", self._name])

    def init(self, distro=None):
        for dir_ in (self.pkgsdir, self.filesdir,
                     self.hooksdir, self.sourcedir):
            Path(dir_).mkdir(parents=True, exist_ok=True)
        for path in (self.pkgsfmt, self.filesfmt,
                     self.prehookfmt, self.posthookfmt):
            p = Path(path.format(distro=self._distro))
            if not p.exists():
                p.write_text("")
        # add exec bit
        for path in (self.prehookfmt, self.posthookfmt):
            Path(path.format(distro=self._distro)).chmod(0o755)


class SysConfig:

    def __init__(self):
        self.backup_config = NOT_PROVIDED
        self._current_distro = current_distro()
        self._modulesdir = (Path()/"modules.d").resolve(strict=True)
        self.check_support()

    def check_support(self):
        pass

    def _install_one_module(self, path):
        if isfile(path/"disabled"):
            warning(f"ignoring disabled module {path.name}")
        else:
            info(f"installing {path.name}")
            with enterdir(path):
                module = ConfigModule(path.name, distro=self._current_distro)
                module.install(backup_config=self.backup_config)

    def install_all_modules(self, start_at=None):
        if start_at:
            start_at = self._resolve_module_path_by_name(start_at).name
        for path in self.iter_module_paths(start_at):
            self._install_one_module(path)

    def install_one_module(self, module):
        path = self._resolve_module_path_by_name(module)
        self._install_one_module(path)

    def _resolve_module_path_by_name(self, module):
        try:
            path = (self._modulesdir/module).resolve(strict=True)
        except FileNotFoundError:
            matches = list(self._modulesdir.glob(f"*{module}*"))
            if not matches:
                raise ModuleError(
                    f"module name {module} does not exist."
                ) from None
            match_num = len(matches)
            if match_num != 1:
                raise ModuleError(
                    f"module name {module} is ambiguous: "
                    f"{match_num} found: %s."
                    % ", ".join(match.name for match in matches)
                ) from None
            path = matches.pop()
        if commonpath([path, self._modulesdir]) != str(self._modulesdir):
            raise ModuleError(
                f"module name {module} does not exist."
            ) from None
        return path

    def _create_module_name(self, name, exist_ok=False):
        digit_len = 4
        existing_module_paths = {
            module.name[digit_len:]: module
            for module in self.iter_module_paths()
        }
        if name in existing_module_paths:
            if exist_ok:
                return existing_module_paths[name].name
            else:
                raise InitError(f"module exists: {name}")
        return "{0:04d}{1}".format(len(existing_module_paths), name)

    def get_annex_files(self, annex_repo):
        run(split(f"git annex get --all --from={annex_repo}"), check=True)

    def refresh_pkg_cache(self):
        run(PKG_CMD[self._current_distro][0], shell=True, check=True)

    def iter_module_paths(self, start_at=None):
        if not start_at:
            return sorted(self._modulesdir.glob("[0-9][0-9][0-9][0-9]?*"))
        else:
            return filter(
                lambda p: p.name >= start_at,
                sorted(self._modulesdir.glob("[0-9][0-9][0-9][0-9]?*"))
            )

    def list_modules(self):
        print("\n".join(p.name for p in self.iter_module_paths()))

    def install_modules(self, start_at=None, refresh=False, annex_repo=None,
                        backup_config=True, module=None):
        self.backup_config = backup_config
        if annex_repo:
            self.get_annex_files(annex_repo=annex_repo)
        if refresh:
            self.refresh_pkg_cache()
        if not module:
            self.install_all_modules(start_at)
        else:
            self.install_one_module(module)

    def show_module(self, module):
        path = self._resolve_module_path_by_name(module)
        with enterdir(path):
            ConfigModule(path.name).show()

    def init_module(self, module, distro=None, force=False):
        distro = distro or self._current_distro
        if distro not in DISTROS:
            raise UnknownDistro(
                f"{distro} is not a supported Linux distribution, "
                f"try {DISTROS}."
            )
        if path_sep in module:
            raise ModuleError(
                f"Invalid module name: can not contain {path_sep}: {module}"
            )
        name = self._create_module_name(module, exist_ok=force)
        path = Path(self._modulesdir, name)
        path.mkdir(parents=True, exist_ok=True)
        with enterdir(path):
            ConfigModule(name, distro=distro).init()


def install_modules(start_at=None, refresh=False, annex_repo=None,
                    backup_config=True, module=None):
    check_sudo()
    actual_uid, actual_gid = get_actual_ugid()
    with as_user(uid=actual_uid, gid=actual_gid):
        SysConfig().install_modules(
            start_at=start_at,
            refresh=refresh,
            annex_repo=annex_repo,
            backup_config=backup_config,
            module=module,
        )


def list_modules():
    SysConfig().list_modules()


def show_module(module):
    SysConfig().show_module(module)


def init_module(module, distro=None, force=False):
    SysConfig().init_module(module, distro=distro, force=force)


def parse_args():
    parser = ArgumentParser(
        description="Sysconfigs CLI interface.",
        formatter_class=NoSubparsersMetavarFormatter,
    )
    subparsers = parser.add_subparsers(title="subcommands")
    # workaround:
    # https://stackoverflow.com/questions/18282403/argparse-with-required-subcommands
    subparsers.required = True
    # subcommand: install
    install_parser = subparsers.add_parser(
        "install",
        description="The %(prog)s subcommand install one or many "
                    "configuration modules. By default, it installs "
                    "all modules or modules starting at FIRST. When "
                    "MODULE is specified, it installs only the "
                    "specified module. "
                    "When root privilege is required for installing "
                    "system-wide configurations, use 'sudo' "
                    "rather than actual root user.",
        help="install configuration modules.",
    )
    mutex_group = install_parser.add_mutually_exclusive_group()
    mutex_group.add_argument(
        "module",
        nargs="?",
        help="the name of a module to be installed, "
             "or unambiguous part of it.",
        metavar="MODULE"
    )
    mutex_group.add_argument(
        "--start-at", "-t",
        metavar="FIRST",
        help="install modules starting at %(metavar)s."
    )
    install_parser.add_argument(
        "--refresh",
        dest="refresh",
        action="store_true",
        help="refresh package manager database before installing."
    )
    install_parser.add_argument(
        "--annex-repo",
        action="store",
        metavar="REPOSITORY",
        help="specify git-annex repository where binary files "
             "are stored. When specified, those files will be firstly "
             "fetched from it before module installation.",
    )
    install_parser.add_argument(
        "--no-backup-config",
        action="store_false",
        dest="backup_config",
        help="""by default, original configuration files and directories
             are renamed with orig.<N> suffix to avoid data loss. When
             this flag is specified, no backup will be made.
             """,
    )
    install_parser.set_defaults(operation=install_modules)
    # subcommand: list
    list_parser = subparsers.add_parser(
        "list",
        description="List available configuration modules.",
        help="list available configuration modules.",
    )
    list_parser.set_defaults(operation=list_modules)
    # subcommand: show
    show_parser = subparsers.add_parser(
        "show",
        description="Show content of MODULE.",
        help="show content of the specified configuration module.",
    )
    show_parser.add_argument(
        "module",
        help="the name of module to show, or unambiguous part of it.",
        metavar="MODULE",
    )
    show_parser.set_defaults(operation=show_module)
    # subcommands: initmod
    initmod_parser = subparsers.add_parser(
        "initmod",
        description="Initialize MODULE by creating boilerplate "
                    "directory structures.",
        help="initialize an empty configuration module by creating "
             "boilerplate directory structures."
    )
    initmod_parser.add_argument(
        "module",
        help="the module to be initialized.",
        metavar="MODULE",
    )
    initmod_parser.add_argument(
        "-f", "--force",
        help="Allow to re-initialize an existing module.",
        action="store_true",
        dest="force",
    )
    initmod_parser.add_argument(
        "-d", "--distro",
        help="""Specify for which distribution the module is initializing.
             Default assumes current Linux distribution on which
             the program is running.""",
    )
    initmod_parser.set_defaults(operation=init_module)
    ## parse
    args = parser.parse_args()
    return args


def get_actual_ugid():
    """
    'actual u/gid' is normally the current effective u/gid,
    If invoked via sudo, it should be SUDO_UID/SUDO_GID.
    """
    try:
        actual_uid = int(os.getenv("SUDO_UID"))
    except TypeError:
        actual_uid = os.geteuid()
    try:
        actual_gid = int(os.getenv("SUDO_GID"))
    except TypeError:
        actual_gid = os.getegid()
    return actual_uid, actual_gid


def check_sudo():
    try:
        sudo_uid = int(os.getenv("SUDO_UID"))
    except TypeError:
        sudo_uid = None
    # bail out if we are effective root but not sudo-root
    if os.geteuid() == 0 and sudo_uid is None:
        raise UsageError(
            "When running this command, please use 'sudo'-root, "
            "rather than being real root user."
        )


def main():
    args = parse_args()
    operation = args.operation
    del args.operation
    operation(**vars(args))


if __name__ == "__main__":
    main()
