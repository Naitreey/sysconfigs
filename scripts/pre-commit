#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".
SUCCESS=0
FAILURE=1

blueify() {
    echo -e "\e[34m$*\e[0m"
}
redify() {
    echo -e "\e[31m$*\e[0m"
}
boldify() {
    echo -e "\e[1m$*\e[0m"
}

#--- verify commit author and email ---
author=
email=
git_author=$GIT_AUTHOR_NAME
git_email=$GIT_AUTHOR_EMAIL
if [ -z "$git_author" ]; then
    git_author=$(git config user.name)
fi
if [ -z "$git_email" ]; then
    git_email=$(git config user.email)
fi

if [ -z "$author" ] && [ -z "$email" ]; then
    cat 1>&2 <<EOF
$(boldify $(redify "Specify *expected* author and email for commit checking."))
EOF
    exec 0</dev/tty
    echo
    read -e -p "Author: " author
    read -e -p "Email: " email
    echo
    exec <&-
    script=$0
    sed -i -e "/^author=$/s/author=/author='$author'/" "$script"
    sed -i -e "/^email=$/s/email=/email='$email'/" "$script"
fi

if [ "$git_author" != "$author" ] || [ "$git_email" != "$email" ]; then
    cat 1>&2 <<EOF
Author and email configured:
    $(boldify $(redify "$git_author <$git_email>"))
Author and email expected:
    $(boldify $(blueify "$author <$email>"))
Unexpected author and/or email, "git config" before proceeding.
EOF
    exit $FAILURE
fi

#--- automatically configured by git-annex ---
git annex pre-commit .

#--- all passed ---
exit $SUCCESS

#--- default script, see githooks(5) ---
#if git rev-parse --verify HEAD >/dev/null 2>&1
#then
#	against=HEAD
#else
#	# Initial commit: diff against an empty tree object
#	against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
#fi
#
## If you want to allow non-ASCII filenames set this variable to true.
#allownonascii=$(git config --bool hooks.allownonascii)
#
## Redirect output to stderr.
#exec 1>&2
#
## Cross platform projects tend to avoid non-ASCII filenames; prevent
## them from being added to the repository. We exploit the fact that the
## printable range starts at the space character and ends with tilde.
#if [ "$allownonascii" != "true" ] &&
#	# Note that the use of brackets around a tr range is ok here, (it's
#	# even required, for portability to Solaris 10's /usr/bin/tr), since
#	# the square bracket bytes happen to fall in the designated range.
#	test $(git diff --cached --name-only --diff-filter=A -z $against |
#	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
#then
#	cat <<\EOF
#Error: Attempt to add a non-ASCII file name.
#
#This can cause problems if you want to work with people on other platforms.
#
#To be portable it is advisable to rename the file.
#
#If you know what you are doing you can disable this check using:
#
#  git config hooks.allownonascii true
#EOF
#	exit 1
#fi
#
## If there are whitespace errors, print the offending file names and fail.
#exec git diff-index --check --cached $against --
